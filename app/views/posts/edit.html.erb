<h3>Post Form</h3>

<!-- form_for method -->

<%= form_for(@post) do |f| %>
  <label>Post title:</label>
  <%= f.text_field :title %><br>

  <label>Post description:</label>
  <%= f.text_area :description %><br>

  <%= f.submit %>
<% end %>


<!-- form_tag method  vs form_for mehod!!!->

  !!!Difference between form_for and form_tag
      The differences between form_for and form_tag are subtle, but important. Below is a basic breakdown of the differences.
       We'll start with talking about them at a high level perspective and then get into each one of the aspects on a practical/implementation basis:

      The form_for method accepts the instance of the model as an argument. Using this argument, form_for is able to make a bunch of assumptions for you.

      form_for yields an object of class FormBuilder

      form_for automatically knows the standard route (it follows RESTful conventions) for the form data as opposed to having to manually declare it

      form_for gives the option to dynamically change the submit button text (this comes in very handy when you're using a form partial and the new and
      edit pages will share the same form, but more on that in a later lesson)

 !!!A good rule of thumb for when to use one approach over the other is below:!!!

    Use form_for when your form is directly connected to a model. Extending our example from the introduction, this would be our Hamster's profile edit form
    that connects to the profile database table. This is the most common case when form_for is used

    Use form_tag when you simply need an HTML form generated. Examples of this would be: a search form field or a contact form

<!-- form_tag method

< <%= form_tag post_path(@post), method: "put" do %>
  <!--  <label>Post title:</label><br>
  <    <%= text_field_tag :title, @post.title %><br> %>

  <    <label>Post Description</label><br>
  <    <%= text_area_tag :description, @post.description %><br> %>

  <     <%= submit_tag "Submit Post" %> %> %>
<       <% end %>  -->

  
